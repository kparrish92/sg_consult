# compare the column idea
most_interested_qs = c("codeswitch_rude",
"valuable",
"no_accent",
"like_becoming_bilingual",
"important_spanish")
directly_affected_questions = c("schools_teach",
"effort",
"can_become_bilingual",
"idea",
"learn_not_abroad",
"future_career",
"connect_with_people",
"multilingualism_asset",
"acceptable_monolingualism")
semi_affected_questions = c("smarter_two_languages",
"started_younger",
"admire_multilinguals",
"like_langauges",
"interest_languages",
"like_spanish",
"like_hearing_spanish",
"communicating_spanish_speakers",
"worldview",
"boring_spanish_class",
"fun_studying_languages",
"interesting_studying_languages",
"interesting_spanish_cultures",
"beautiful")
least_affected_questions = c("excited_spanish_class",
"outside_engagement",
"spanish_favorite_class",
"difficult_classroom_learning")
ef = l2_data %>%
pivot_longer(cols = c(3:34), names_to = "prompt", values_to = "rating") %>%
mutate(question_type = case_when(
prompt %in% directly_affected_questions ~ "directly_affected_questions",
prompt %in% semi_affected_questions ~ "semi_affected_questions",
prompt %in% least_affected_questions ~ "least_affected_questions",
prompt %in% most_interested_qs ~ "most_interested_qs",
)) %>%
filter(!is.na(rating))
most_int = ef %>% filter(question_type == "most_interested_qs")
dir_aff = ef %>% filter(question_type == "directly_affected_questions")
semi_eff = ef %>% filter(question_type == "semi_affected_questions")
least_aff = ef %>% filter(question_type == "least_affected_questions")
na_q = ef %>% filter(is.na(question_type))
unique(na_q$prompt)
unique(most_int$prompt)
unique(dir_aff$prompt)
unique(semi_eff$prompt)
unique(least_aff$prompt)
ef %>%
write.csv(here("data", "ratings_tidy.csv"))
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(tidyverse)
library(jtools)
library(sjPlot)
library(lme4)
library(lmerTest)
td = read.csv(here("data", "ratings_tidy.csv"))
rating_ver = td %>%
filter(question_type == "most_interested_qs") %>%
group_by(version) %>%
summarise(n_t = n())
pct_df_preq = td %>%
filter(question_type == "most_interested_qs") %>%
group_by(version, rating) %>%
summarise(n = n()) %>%
left_join(rating_ver) %>%
mutate(pct = n/n_t)
#| label: pct1
#| fig-cap: "The percentage of each rating by group for the 5 questions in focus"
pct_df_preq %>%
ggplot(aes(y = pct, x = rating, fill = as.factor(version))) +
geom_col(color = "black", position = "dodge") +
scale_fill_manual(values = c("#71797E", "seagreen")) +
facet_wrap(~version) + theme_apa() + xlab("Rating choice") +
ylab("Percentage of Ratings")
most_int = td %>% filter(question_type == "most_interested_qs")  %>%
mutate(rating_recode = case_when(
rating == 5 | rating == 4 ~ 1,
rating == 3 | rating == 2 | rating == 1 ~ 0,
))
most_int$version = as.factor(most_int$version)
most_int$current_class = as.factor(most_int$current_class)
null_mod_most = lme4::glmer(rating_recode ~ 1 + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = most_int)
ver_mod_most = lme4::glmer(rating_recode ~ version + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = most_int)
class_mod_most = lme4::glmer(rating_recode ~ version + current_class + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = most_int)
int_mod_most = lme4::glmer(rating_recode ~ version + current_class + current_class:version + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = most_int)
most_int = anova(null_mod_most, ver_mod_most, class_mod_most, int_mod_most) %>%
janitor::clean_names()
most_int
summary(class_mod_most)
rating_ver_da = td %>%
filter(question_type == "directly_affected_questions") %>%
group_by(version) %>%
summarise(n_t = n())
pct_df_preq_da = td %>%
filter(question_type == "directly_affected_questions") %>%
group_by(version, rating) %>%
summarise(n = n()) %>%
left_join(rating_ver_da) %>%
mutate(pct = n/n_t)
#| label: pct3
#| fig-cap: "The percentage of each rating by group for the directly affected questions"
pct_df_preq_da %>%
ggplot(aes(y = pct, x = rating, fill = as.factor(version))) +
geom_col(color = "black", position = "dodge") +
scale_fill_manual(values = c("#71797E", "seagreen")) +
facet_wrap(~version) + theme_apa() + xlab("Rating choice") +
ylab("Percentage of Ratings")
dir_aff = td %>% filter(question_type == "directly_affected_questions") %>%
mutate(rating_recode = case_when(
rating == 1 ~ 1,
rating == 4 | rating == 3 | rating == 2 ~ 0,
))
dir_aff$version = as.factor(dir_aff$version)
dir_aff$current_class = as.factor(dir_aff$current_class)
null_mod_dir = glmer(rating_recode ~ 1 + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = dir_aff)
ver_mod_dir = glmer(rating_recode ~ version + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = dir_aff)
class_mod_dir = glmer(rating_recode ~ version + current_class + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = dir_aff)
int_mod_dir = glmer(rating_recode ~ version + current_class + current_class:version + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = dir_aff)
dirr_int = anova(null_mod_dir, ver_mod_dir, class_mod_dir, int_mod_dir) %>%
janitor::clean_names()
summary(class_mod_dir)
rating_ver_sa = td %>%
filter(question_type == "semi_affected_questions") %>%
group_by(version) %>%
summarise(n_t = n())
pct_df_preq_sa = td %>%
filter(question_type == "semi_affected_questions") %>%
group_by(version, rating) %>%
summarise(n = n()) %>%
left_join(rating_ver_sa) %>%
mutate(pct = n/n_t)
#| fig-cap: "The percentage of each rating by group for the semi-affected questions"
pct_df_preq_sa %>%
ggplot(aes(y = pct, x = rating, fill = as.factor(version))) +
geom_col(color = "black", position = "dodge") +
scale_fill_manual(values = c("#71797E", "seagreen")) +
facet_wrap(~version) + theme_apa() + xlab("Rating choice") +
ylab("Percentage of Ratings")
semi_eff = td %>% filter(question_type == "semi_affected_questions") %>% mutate(rating_recode = case_when(
rating == 5 | rating == 4 ~ 1,
rating == 3 | rating == 2 | rating == 1 ~ 0,
))
semi_eff$version = as.factor(semi_eff$version)
semi_eff$current_class = as.factor(semi_eff$current_class)
null_mod_semi = lme4::glmer(rating_recode ~ 1 + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = semi_eff)
ver_mod_semi = lme4::glmer(rating_recode ~ version + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = semi_eff)
class_mod_semi = lme4::glmer(rating_recode ~ version + current_class + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = semi_eff)
int_mod_semi = lme4::glmer(rating_recode ~ version + current_class + current_class:version + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = semi_eff)
semi_int = anova(null_mod_semi, ver_mod_semi, class_mod_semi, int_mod_semi) %>%
janitor::clean_names()
summary(class_mod_semi)
rating_ver_la = td %>%
filter(question_type == "least_affected_questions") %>%
group_by(version) %>%
summarise(n_t = n())
pct_df_preq_la = td %>%
filter(question_type == "least_affected_questions") %>%
group_by(version, rating) %>%
summarise(n = n()) %>%
left_join(rating_ver) %>%
mutate(pct = n/n_t)
#| label: pct2
#| fig-cap: "The percentage of each rating by group for the least effected questions"
pct_df_preq_la %>%
ggplot(aes(y = pct, x = rating, fill = as.factor(version))) +
geom_col(color = "black", position = "dodge") +
scale_fill_manual(values = c("#71797E", "seagreen")) +
facet_wrap(~version) + theme_apa() + xlab("Rating choice") +
ylab("Percentage of Ratings")
least_aff = td %>% filter(question_type == "least_affected_questions")  %>% mutate(rating_recode = case_when(
rating == 5 | rating == 4 ~ 1,
rating == 3 | rating == 2 | rating == 1 ~ 0,
))
least_aff$version = as.factor(least_aff$version)
least_aff$current_class = as.factor(least_aff$current_class)
null_mod_least = lme4::glmer(rating_recode ~ 1 + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = least_aff)
ver_mod_least = lme4::glmer(rating_recode ~ version + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = least_aff)
class_mod_least = lme4::glmer(rating_recode ~ version + current_class + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = least_aff)
int_mod_least = lme4::glmer(rating_recode ~ version + current_class + current_class:version + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = least_aff)
least_int = anova(null_mod_least, ver_mod_least, class_mod_least, int_mod_least) %>%
janitor::clean_names()
least_int
summary(class_mod_least)
rbind(least_aff, most_int, dir_aff, semi_eff)
most_int
most_int
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(tidyverse)
library(jtools)
library(sjPlot)
library(lme4)
library(lmerTest)
td = read.csv(here("data", "ratings_tidy.csv"))
rating_ver = td %>%
filter(question_type == "most_interested_qs") %>%
group_by(version) %>%
summarise(n_t = n())
pct_df_preq = td %>%
filter(question_type == "most_interested_qs") %>%
group_by(version, rating) %>%
summarise(n = n()) %>%
left_join(rating_ver) %>%
mutate(pct = n/n_t)
#| label: pct1
#| fig-cap: "The percentage of each rating by group for the 5 questions in focus"
pct_df_preq %>%
ggplot(aes(y = pct, x = rating, fill = as.factor(version))) +
geom_col(color = "black", position = "dodge") +
scale_fill_manual(values = c("#71797E", "seagreen")) +
facet_wrap(~version) + theme_apa() + xlab("Rating choice") +
ylab("Percentage of Ratings")
most_int_data = td %>% filter(question_type == "most_interested_qs")  %>%
mutate(rating_recode = case_when(
rating == 5 | rating == 4 ~ 1,
rating == 3 | rating == 2 | rating == 1 ~ 0,
))
most_int_data$version = as.factor(most_int_data$version)
most_int_data$current_class = as.factor(most_int_data$current_class)
null_mod_most = lme4::glmer(rating_recode ~ 1 + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = most_int_data)
ver_mod_most = lme4::glmer(rating_recode ~ version + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = most_int_data)
class_mod_most = lme4::glmer(rating_recode ~ version + current_class + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = most_int_data)
int_mod_most = lme4::glmer(rating_recode ~ version + current_class + current_class:version + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = most_int_data)
most_int = anova(null_mod_most, ver_mod_most, class_mod_most, int_mod_most) %>%
janitor::clean_names()
most_int
summary(class_mod_most)
rating_ver_da = td %>%
filter(question_type == "directly_affected_questions") %>%
group_by(version) %>%
summarise(n_t = n())
pct_df_preq_da = td %>%
filter(question_type == "directly_affected_questions") %>%
group_by(version, rating) %>%
summarise(n = n()) %>%
left_join(rating_ver_da) %>%
mutate(pct = n/n_t)
#| label: pct3
#| fig-cap: "The percentage of each rating by group for the directly affected questions"
pct_df_preq_da %>%
ggplot(aes(y = pct, x = rating, fill = as.factor(version))) +
geom_col(color = "black", position = "dodge") +
scale_fill_manual(values = c("#71797E", "seagreen")) +
facet_wrap(~version) + theme_apa() + xlab("Rating choice") +
ylab("Percentage of Ratings")
dir_aff = td %>% filter(question_type == "directly_affected_questions") %>%
mutate(rating_recode = case_when(
rating == 1 ~ 1,
rating == 4 | rating == 3 | rating == 2 ~ 0,
))
dir_aff$version = as.factor(dir_aff$version)
dir_aff$current_class = as.factor(dir_aff$current_class)
null_mod_dir = glmer(rating_recode ~ 1 + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = dir_aff)
ver_mod_dir = glmer(rating_recode ~ version + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = dir_aff)
class_mod_dir = glmer(rating_recode ~ version + current_class + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = dir_aff)
int_mod_dir = glmer(rating_recode ~ version + current_class + current_class:version + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = dir_aff)
dirr_int = anova(null_mod_dir, ver_mod_dir, class_mod_dir, int_mod_dir) %>%
janitor::clean_names()
summary(class_mod_dir)
rating_ver_sa = td %>%
filter(question_type == "semi_affected_questions") %>%
group_by(version) %>%
summarise(n_t = n())
pct_df_preq_sa = td %>%
filter(question_type == "semi_affected_questions") %>%
group_by(version, rating) %>%
summarise(n = n()) %>%
left_join(rating_ver_sa) %>%
mutate(pct = n/n_t)
#| fig-cap: "The percentage of each rating by group for the semi-affected questions"
pct_df_preq_sa %>%
ggplot(aes(y = pct, x = rating, fill = as.factor(version))) +
geom_col(color = "black", position = "dodge") +
scale_fill_manual(values = c("#71797E", "seagreen")) +
facet_wrap(~version) + theme_apa() + xlab("Rating choice") +
ylab("Percentage of Ratings")
semi_eff = td %>% filter(question_type == "semi_affected_questions") %>% mutate(rating_recode = case_when(
rating == 5 | rating == 4 ~ 1,
rating == 3 | rating == 2 | rating == 1 ~ 0,
))
semi_eff$version = as.factor(semi_eff$version)
semi_eff$current_class = as.factor(semi_eff$current_class)
null_mod_semi = lme4::glmer(rating_recode ~ 1 + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = semi_eff)
ver_mod_semi = lme4::glmer(rating_recode ~ version + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = semi_eff)
class_mod_semi = lme4::glmer(rating_recode ~ version + current_class + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = semi_eff)
int_mod_semi = lme4::glmer(rating_recode ~ version + current_class + current_class:version + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = semi_eff)
semi_int = anova(null_mod_semi, ver_mod_semi, class_mod_semi, int_mod_semi) %>%
janitor::clean_names()
summary(class_mod_semi)
rating_ver_la = td %>%
filter(question_type == "least_affected_questions") %>%
group_by(version) %>%
summarise(n_t = n())
pct_df_preq_la = td %>%
filter(question_type == "least_affected_questions") %>%
group_by(version, rating) %>%
summarise(n = n()) %>%
left_join(rating_ver) %>%
mutate(pct = n/n_t)
#| label: pct2
#| fig-cap: "The percentage of each rating by group for the least effected questions"
pct_df_preq_la %>%
ggplot(aes(y = pct, x = rating, fill = as.factor(version))) +
geom_col(color = "black", position = "dodge") +
scale_fill_manual(values = c("#71797E", "seagreen")) +
facet_wrap(~version) + theme_apa() + xlab("Rating choice") +
ylab("Percentage of Ratings")
least_aff = td %>% filter(question_type == "least_affected_questions")  %>% mutate(rating_recode = case_when(
rating == 5 | rating == 4 ~ 1,
rating == 3 | rating == 2 | rating == 1 ~ 0,
))
least_aff$version = as.factor(least_aff$version)
least_aff$current_class = as.factor(least_aff$current_class)
null_mod_least = lme4::glmer(rating_recode ~ 1 + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = least_aff)
ver_mod_least = lme4::glmer(rating_recode ~ version + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = least_aff)
class_mod_least = lme4::glmer(rating_recode ~ version + current_class + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = least_aff)
int_mod_least = lme4::glmer(rating_recode ~ version + current_class + current_class:version + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = least_aff)
least_int = anova(null_mod_least, ver_mod_least, class_mod_least, int_mod_least) %>%
janitor::clean_names()
least_int
summary(class_mod_least)
rbind(least_aff, most_int_data, dir_aff, semi_eff)
recode_df = rbind(least_aff, most_int_data, dir_aff, semi_eff)
null_mod_comb = lme4::glmer(rating_recode ~ 1 + (1 | prompt) + (1 | participant_number) + (rating_recode | current_class),
family = "binomial",
data = recode_df)
recode_df
recode_df = rbind(least_aff, most_int_data, dir_aff, semi_eff)
null_mod_comb = lme4::glmer(rating_recode ~ 1 + (1 | prompt) + (1 | participant_number) + (rating_recode | current_class),
family = "binomial",
data = recode_df)
question_type_mod_comb = lme4::glmer(rating_recode ~ question_type + (1 | prompt) + (1 | participant_number) + (rating_recode | current_class),
family = "binomial",
data = recode_df)
version_mod_comb = lme4::glmer(rating_recode ~ question_type + version + (1 | prompt) + (1 | participant_number) + (rating_recode | current_class),
family = "binomial",
data = recode_df)
anova(null_mod_comb, question_type_mod_comb, version_mod_comb)
recode_df = rbind(least_aff, most_int_data, dir_aff, semi_eff)
null_mod_comb = lme4::glmer(rating_recode ~ 1 + (1 | prompt) + (1 | participant_number) + (1 | current_class),
family = "binomial",
data = recode_df)
question_type_mod_comb = lme4::glmer(rating_recode ~ question_type + (1 | prompt) + (1 | participant_number) + (1 | current_class),
family = "binomial",
data = recode_df)
version_mod_comb = lme4::glmer(rating_recode ~ question_type + version + (1 | prompt) + (1 | participant_number) + (1 | current_class),
family = "binomial",
data = recode_df)
anova(null_mod_comb, question_type_mod_comb, version_mod_comb)
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(tidyverse)
library(jtools)
library(sjPlot)
library(lme4)
library(lmerTest)
td = read.csv(here("data", "ratings_tidy.csv"))
rating_ver = td %>%
filter(question_type == "most_interested_qs") %>%
group_by(version) %>%
summarise(n_t = n())
pct_df_preq = td %>%
filter(question_type == "most_interested_qs") %>%
group_by(version, rating) %>%
summarise(n = n()) %>%
left_join(rating_ver) %>%
mutate(pct = n/n_t)
#| label: pct1
#| fig-cap: "The percentage of each rating by group for the 5 questions in focus"
pct_df_preq %>%
ggplot(aes(y = pct, x = rating, fill = as.factor(version))) +
geom_col(color = "black", position = "dodge") +
scale_fill_manual(values = c("#71797E", "seagreen")) +
facet_wrap(~version) + theme_apa() + xlab("Rating choice") +
ylab("Percentage of Ratings")
rating_ver = td %>%
filter(question_type == "most_interested_qs") %>%
group_by(version) %>%
summarise(n_t = n())
pct_df_preq = td %>%
filter(question_type == "most_interested_qs") %>%
group_by(version, rating) %>%
summarise(n = n()) %>%
left_join(rating_ver) %>%
mutate(pct = n/n_t)
#| label: pct1
#| fig-cap: "The percentage of each rating by group for the 5 questions in focus"
pct_df_preq %>%
ggplot(aes(y = pct, x = rating, fill = as.factor(version))) +
geom_col(color = "black", position = "dodge") +
scale_fill_manual(values = c("#71797E", "seagreen")) +
facet_wrap(~version) + theme_apa() + xlab("Rating choice") +
ylab("Percentage of Ratings")
most_int_data = td %>% filter(question_type == "most_interested_qs")  %>%
mutate(rating_recode = case_when(
rating == 5 | rating == 4 ~ 1,
rating == 3 | rating == 2 | rating == 1 ~ 0,
))
most_int_data$version = as.factor(most_int_data$version)
most_int_data$current_class = as.factor(most_int_data$current_class)
null_mod_most = lme4::glmer(rating_recode ~ 1 + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = most_int_data)
ver_mod_most = lme4::glmer(rating_recode ~ version + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = most_int_data)
class_mod_most = lme4::glmer(rating_recode ~ version + current_class + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = most_int_data)
int_mod_most = lme4::glmer(rating_recode ~ version + current_class + current_class:version + (1 | prompt) + (1 | participant_number),
family = "binomial",
data = most_int_data)
most_int = anova(null_mod_most, ver_mod_most, class_mod_most, int_mod_most) %>%
janitor::clean_names()
# bayesian
library(brms)
most_bayes = brm(rating ~ version*current_class + (1 | prompt) +
(1 | trial_object) + (1 | participant_number),
family = "cumulative",
data = most_int_data,
file = here("data", "models", "most_imp_ord.rds"))
# bayesian
library(brms)
most_bayes = brm(rating ~ version*current_class + (1 | prompt) + (1 | participant_number),
family = "cumulative",
data = most_int_data,
file = here("data", "models", "most_imp_ord.rds"))
summary(most_bayes)
# bayesian
library(brms)
most_bayes = brm(rating ~ version + (1 | prompt) + (1 | participant_number),
family = "cumulative",
data = most_int_data,
file = here("data", "models", "most_imp_ord.rds"))
summary(most_bayes)
# bayesian
library(brms)
most_bayes = brm(rating ~ version + (1 | prompt) + (1 | participant_number),
family = "cumulative",
data = most_int_data,
file = here("data", "models", "most_imp_ord.rds"))
summary(most_bayes)
